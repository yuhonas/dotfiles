---
- name: linux applications
  package: name={{ item }} state=present
  become: true
  with_items:
    - community/rofi-calc
    - docker
    # - keychain # key manager for OpenSSH
    - ksshaskpass # https://wiki.archlinux.org/index.php/KDE_Wallet#Using_the_KDE_Wallet_to_store_ssh_key_passphrases
    - pciutils # for lspci so we can inspect the video card
    - pulseaudio # for audio
    - ranger # visual file manager
    - rofi
    - restic # for fast, secure backup's
    - xclip # for commandline clipboard management
    - xorg-xrandr # for xwindow resizing/rotating/scaling
    - xsel # for commandline clipboard management
    - yay # AUR Helper written in go

- name: create a user .config dir
  file: path="{{ ansible_env.HOME }}/.config" state=directory

- name: create user dir for systemd inits
  file: path="{{ ansible_env.HOME }}/.config/systemd/user" state=directory recurse=yes owner={{ ansible_ssh_user }}

# - name: copy rclone systemd init
#   template:
#     src: rclone.service.j2
#     dest: /etc/systemd/system/rclone.service
#   become: true

- name: copying ssh-agent systemd init
  copy:
    src: ssh-agent.service
    dest: "{{ ansible_env.HOME }}/.config/systemd/user/ssh-agent.service"
    owner: "{{ ansible_ssh_user }}"

# - name: ensure we have a dropbox dir that rclone can mount too
#   file: path={{ dropbox_directory }} state=directory

- name: install tlp for power management
  package: name={{ item }} state=present
  become: true
  with_items:
    - tlp
    - tlp-rdw

- name: ensure user has access to touch inputs
  user:
    name: "{{ ansible_ssh_user }}"
    groups: input
    append: yes
  become: true

- name: install libinput for touchpad gestures
  package: name={{ item }} state=present
  become: true
  with_items:
    - xdotool
    - libinput-gestures

- name: check if libinput-gestures is installed
  command: libinput-gestures-setup status
  register: libinput_installed
  ignore_errors: true

- name: create temporary installation directory
  tempfile:
    state: directory
  register: temp_build_directory
  when: libinput_installed is failed

- name: cloning lib-input-gestures for installation
  git:
    repo: 'https://github.com/bulletmark/libinput-gestures.git'
    dest: "{{ temp_build_directory.path }}"
    version: master
  when: libinput_installed is failed

- name: installing lib-input-gestures
  command:
    cmd: make install
    chdir: "{{ temp_build_directory.path }}"
    creates: /usr/bin/libinput-gestures
  become: true
  when: libinput_installed is failed

- name: get libinput status
  command: libinput-gestures-setup status
  register: libinput_status
  changed_when: false

- name: set libinput to autostart
  command: libinput-gestures-setup autostart
  when: '"is not set to autostart" in libinput_status.stdout'

- name: set libinput to start
  command: libinput-gestures-setup start
  when: '"is not running" in libinput_status.stdout'

# - name: disable quiet splash during bootup
#   replace:
#     path: /etc/default/grub
#     regexp: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"'
#     replace: 'GRUB_CMDLINE_LINUX_DEFAULT=""'
#   become: true
#   register: grub_config

# - name: update grub config
#   command: update-grub
#   become: true
#   when: grub_config is changed

# https://forums.linuxmint.com/viewtopic.php?t=91453
# - name: fix issue with thinkpad x1 carbon volume
#   blockinfile:
#     path: "/usr/share/pulseaudio/alsa-mixer/paths/analog-output.conf.common"
#     block: |
#       [Element Master]
#       switch = mute
#       volume = ignore
#     marker: "; {mark} ANSIBLE MANAGED BLOCK"
#     insertbefore: "Element PCM"
#   become: true

# https://www.addictivetips.com/ubuntu-linux-tips/fix-media-keys-not-working-on-linux/
- name: install playerctl for full media key support
  package: name=playerctl state=present
  become: true

- name: add a docker group
  group:
    name: docker
    state: present
    system: true
  become: true

#  https://github.com/docker/docker-snap/issues/1
- name: ensure user has access to docker
  user:
    name: "{{ ansible_ssh_user }}"
    groups: docker
    append: yes
  become: true

- name: check for installed apps
  command: pamac list -i
  register: installed_apps
  changed_when: false

- name: install google-chrome
  command: pamac build --keep --no-confirm google-chrome
  when: '"google-chrome" not in installed_apps.stdout'

- name: install spotify
  command: pamac build --keep --no-confirm spotify
  when: '"spotify" not in installed_apps.stdout'

- name: check for an intel graphics card
  shell: |
    set -o pipefail
    lspci | grep VGA
  args:
    executable: /bin/bash
  register: vga_card
  changed_when: false

- name: copying x11 config for intel graphics card
  copy:
    src: 20-intel.conf
    dest: /usr/share/X11/xorg.conf.d/
    backup: yes
  become: true
  when: '"Intel Corporation" in vga_card.stdout'

# - name: other applications
#   package: name={{ item }} state=present
#   become: true
#   with_items:
#     - adobe-source-code-pro-fonts
#     - nerd-fonts-complete
#     - neomutt
#     - polybar
#     - community/sxiv

